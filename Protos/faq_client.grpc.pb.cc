// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: faq_client.proto

#include "faq_client.pb.h"
#include "faq_client.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace faq_client {

static const char* Client_method_names[] = {
  "/faq_client.Client/Log",
  "/faq_client.Client/Init",
};

std::unique_ptr< Client::Stub> Client::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Client::Stub> stub(new Client::Stub(channel));
  return stub;
}

Client::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Log_(Client_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Init_(Client_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Client::Stub::Log(::grpc::ClientContext* context, const ::faq_client::LogMsg& request, ::faq_client::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Log_, context, request, response);
}

void Client::Stub::experimental_async::Log(::grpc::ClientContext* context, const ::faq_client::LogMsg* request, ::faq_client::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Log_, context, request, response, std::move(f));
}

void Client::Stub::experimental_async::Log(::grpc::ClientContext* context, const ::faq_client::LogMsg* request, ::faq_client::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Log_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::faq_client::Empty>* Client::Stub::PrepareAsyncLogRaw(::grpc::ClientContext* context, const ::faq_client::LogMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::faq_client::Empty>::Create(channel_.get(), cq, rpcmethod_Log_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::faq_client::Empty>* Client::Stub::AsyncLogRaw(::grpc::ClientContext* context, const ::faq_client::LogMsg& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLogRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Client::Stub::Init(::grpc::ClientContext* context, const ::faq_client::InitRequest& request, ::faq_client::InitResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Init_, context, request, response);
}

void Client::Stub::experimental_async::Init(::grpc::ClientContext* context, const ::faq_client::InitRequest* request, ::faq_client::InitResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Init_, context, request, response, std::move(f));
}

void Client::Stub::experimental_async::Init(::grpc::ClientContext* context, const ::faq_client::InitRequest* request, ::faq_client::InitResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Init_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::faq_client::InitResponse>* Client::Stub::PrepareAsyncInitRaw(::grpc::ClientContext* context, const ::faq_client::InitRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::faq_client::InitResponse>::Create(channel_.get(), cq, rpcmethod_Init_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::faq_client::InitResponse>* Client::Stub::AsyncInitRaw(::grpc::ClientContext* context, const ::faq_client::InitRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncInitRaw(context, request, cq);
  result->StartCall();
  return result;
}

Client::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Client_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Client::Service, ::faq_client::LogMsg, ::faq_client::Empty>(
          [](Client::Service* service,
             ::grpc::ServerContext* ctx,
             const ::faq_client::LogMsg* req,
             ::faq_client::Empty* resp) {
               return service->Log(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Client_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Client::Service, ::faq_client::InitRequest, ::faq_client::InitResponse>(
          [](Client::Service* service,
             ::grpc::ServerContext* ctx,
             const ::faq_client::InitRequest* req,
             ::faq_client::InitResponse* resp) {
               return service->Init(ctx, req, resp);
             }, this)));
}

Client::Service::~Service() {
}

::grpc::Status Client::Service::Log(::grpc::ServerContext* context, const ::faq_client::LogMsg* request, ::faq_client::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Client::Service::Init(::grpc::ServerContext* context, const ::faq_client::InitRequest* request, ::faq_client::InitResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace faq_client

